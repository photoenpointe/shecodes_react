{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bear/Documents/GitHub/shecodes_react/src/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport ForecastData from \"./ForecastData.js\";\nexport default function Forecast(props) {\n  _s();\n\n  const [submit, setSubmit] = useState(false);\n  const [forecast, setForecast] = useState(\"\");\n\n  function showForecast(response) {\n    setForecast(response.data);\n    setSubmit(true);\n  }\n\n  if (submit & props.city === forecast.city) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Forecast row\",\n      children: /*#__PURE__*/_jsxDEV(ForecastData, {\n        data: forecast.list[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }, this);\n  } else {\n    let url = `https://api.openweathermap.org//data/2.5/forecast/hourly?q=${city}&appid=af11ba20356f076c2cd217a6bc9cd25e&units=metric`;\n    axios.get(url).then(showForecast);\n    return null;\n  }\n}\n\n_s(Forecast, \"aOpDbokn96P1ejFF3leZ3zzkhUQ=\");\n\n_c = Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/bear/Documents/GitHub/shecodes_react/src/Forecast.js"],"names":["axios","React","useState","ForecastData","Forecast","props","submit","setSubmit","forecast","setForecast","showForecast","response","data","city","list","url","get","then"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACpC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;;AAEA,WAASQ,YAAT,CAAsBC,QAAtB,EAAgC;AAC5BF,IAAAA,WAAW,CAACE,QAAQ,CAACC,IAAV,CAAX;AACAL,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH;;AAED,MAAID,MAAM,GAAGD,KAAK,CAACQ,IAAN,KAAeL,QAAQ,CAACK,IAArC,EAA2C;AACvC,wBAAQ;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACJ,QAAC,YAAD;AAAc,QAAA,IAAI,EAAEL,QAAQ,CAACM,IAAT,CAAc,CAAd;AAApB;AAAA;AAAA;AAAA;AAAA;AADI;AAAA;AAAA;AAAA;AAAA,YAAR;AAGH,GAJD,MAKS;AACD,QAAIC,GAAG,GAAI,8DAA6DF,IAAK,sDAA7E;AACAb,IAAAA,KAAK,CAACgB,GAAN,CAAUD,GAAV,EAAeE,IAAf,CAAoBP,YAApB;AAEA,WAAO,IAAP;AACH;AACJ;;GApBmBN,Q;;KAAAA,Q","sourcesContent":["import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport ForecastData from \"./ForecastData.js\";\n\nexport default function Forecast(props) {\n    const [submit, setSubmit] = useState(false);\n    const [forecast, setForecast] = useState(\"\");\n\n    function showForecast(response) {\n        setForecast(response.data);\n        setSubmit(true);\n    }\n\n    if (submit & props.city === forecast.city) {\n        return (<div className=\"Forecast row\">\n            <ForecastData data={forecast.list[0]} />\n        </div>);\n    }\n        else {\n            let url = `https://api.openweathermap.org//data/2.5/forecast/hourly?q=${city}&appid=af11ba20356f076c2cd217a6bc9cd25e&units=metric`;\n            axios.get(url).then(showForecast);\n\n            return null;\n        }\n    }"]},"metadata":{},"sourceType":"module"}